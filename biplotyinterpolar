# #!/usr/bin/env python3
# # -*- coding: utf-8 -*-
# """
# Created on Sat Mar 15 23:18:54 2025

# @author: diego
# """

# import numpy as np
# import pandas as pd
# import matplotlib.pyplot as plt
# from sklearn.decomposition import PCA
# from sklearn.preprocessing import StandardScaler

# # 📌 Simulación de Datos
# np.random.seed(42)
# X = np.random.rand(100, 5)  # 100 muestras, 5 variables
# variables = ['Var1', 'Var2', 'Var3', 'Var4', 'Var5']
# y = np.random.choice(['Clase 1', 'Clase 2'], size=100)  # Etiquetas de clase

# # 📌 Normalizar los datos
# scaler = StandardScaler()
# X_scaled = scaler.fit_transform(X)

# # 📌 Aplicar PCA
# pca = PCA(n_components=2)
# scores = pca.fit_transform(X_scaled)  # Scores de las muestras
# loadings = pca.components_.T  # Loadings de las variables

# # 📌 Crear Biplot
# fig, ax = plt.subplots(figsize=(8,6))

# # 🔹 1. Graficar los Scores (muestras)
# for clase in np.unique(y):
#     plt.scatter(scores[y == clase, 0], scores[y == clase, 1], label=clase, alpha=0.7)

# # 🔹 2. Graficar los Loadings (variables)
# for i, var in enumerate(variables):
#     plt.arrow(0, 0, loadings[i, 0]*3, loadings[i, 1]*3, color='red', alpha=0.7)
#     plt.text(loadings[i, 0]*3.2, loadings[i, 1]*3.2, var, color='red')

# # 🔹 3. Personalizar el gráfico
# plt.axhline(0, color='black', linewidth=0.5, linestyle="--")
# plt.axvline(0, color='black', linewidth=0.5, linestyle="--")
# plt.xlabel(f"PC1 ({round(pca.explained_variance_ratio_[0]*100,2)}%)")
# plt.ylabel(f"PC2 ({round(pca.explained_variance_ratio_[1]*100,2)}%)")
# plt.title("Biplot - PCA")
# plt.legend()
# plt.grid()
# plt.show()

import numpy as np
import pandas as pd
from scipy.interpolate import interp1d
import matplotlib.pyplot as plt

# 📌 Datos simulados de Raman Shift
raman_shift_sensor1 = np.array([100, 200, 300, 400, 500])  # Sensor 1
intensidad_sensor1 = np.array([10, 15, 20, 25, 30])  # Intensidad en esos puntos

raman_shift_sensor2 = np.array([150, 250, 350, 450])  # Sensor 2 tiene valores diferentes

# 📌 Interpolación Lineal para alinear los datos del Sensor 1 al Sensor 2
interp_func = interp1d(raman_shift_sensor1, intensidad_sensor1, kind="linear", fill_value="extrapolate")
intensidad_interpolada = interp_func(raman_shift_sensor2)  # Obtener intensidades en los puntos del Sensor 2

# 📌 Visualización
plt.plot(raman_shift_sensor1, intensidad_sensor1, 'o-', label="Sensor 1 (Original)")
plt.plot(raman_shift_sensor2, intensidad_interpolada, 'x-', label="Sensor 2 (Interpolado)")
plt.xlabel("Raman Shift")
plt.ylabel("Intensidad")
plt.legend()
plt.title("Interpolación Lineal de Datos Espectrales")
plt.show()









    for i in op_pca:  
        print("ENTRO EN EL FOR DE LOADIN")
        if not isinstance(i, int):  
            raise ValueError(f"El índice de componente debe ser un entero, pero se recibió {type(i)}.")
        if i >= n_componentes:
            print(f"Advertencia: PC {i+1} no existe en los datos de PCA.")
            continue

        plt.plot(raman_shift, loadings[i, :], label=f'PC {i+1}')
       
 

